#!/bin/bash -e
#IO-500 benchmark
# Do not edit this file.  Edit io500.sh to set parameters as you would like.  Then run it; it will source this file. 
# If you discover a need to edit this file, please email the mailing list to discuss.

set -euo pipefail   # give bash better error handling. 
export LC_NUMERIC=C  # prevents printf errors

function main {
  check_variables
  output_description
  core_setup
  ior_easy "write"
  mdt_easy "write"
  touch $timestamp_file  # this file is used subsequently by the find command
  ior_hard "write"
  mdt_hard "write"
  myfind
  ior_easy "read"
  mdt_easy "stat"
  ior_hard "read"
  mdt_hard "stat"
  mdt_easy "delete"
  mdt_hard "delete"
  mdreal
  cleanup
  output_score
}

function cleanup {
  [ "$io500_cleanup_workdir" != "True" ] && printf "\n[Leaving] datafiles in $io500_workdir\n" && return 0 
  echo "[Removing] all files in $io500_workdir"
}

function output_description {
  echo "System: " `uname -n`
  echo "filesystem_utilization=$(df ${io500_workdir}|tail -1)"
  echo "date=$timestamp"
  (set -o posix; set | grep '^io500' | sort)
  extra_description
}

function check_variables {
  # anyone know a way to do this crap with a helper function?
  [ -z "$io500_workdir" ]                    && echo "Need to set io500_workdir variable"           && exit 1
  [ -z "$io500_ior_easy_params" ]            && echo "Need to set io500_ior_easy_params variable"   && exit 1
  [ -z "$io500_mdtest_hard_files_per_proc" ] && echo "Need to set io500_mdtest_hard_files_per_proc variable" && exit 1
  [ -z "$io500_ior_hard_writes_per_proc" ]   && echo "Need to set io500_ior_hard_writes_per_proc variable" && exit 1
  [ -z "$io500_find_cmd" ]                   && echo "Need to set io500_find_cmd variable" && exit 1 
  [ -z "$io500_ior_cmd" ]                    && echo "Need to set io500_ior_cmd variable" && exit 1 
  [ -z "$io500_mdtest_cmd" ]                 && echo "Need to set io500_mdtest_cmd variable" && exit 1 
  [ -z "$io500_mpirun" ]                     && echo "Need to set io500_mpirun variable" && exit 1
  return 0  
}

# helper utility to run an mpi job
function myrun {
  command="$io500_mpirun $io500_mpiargs $1"
  echo "[Exec] $command"
  $command > $2 2>&1 
  echo "[Results] in $2."
}

function get_ior_bw {
  file=$1
  operation=$2
  grep '^'$operation $file | head -1 | awk '{print $2/1024}'
}

function get_ior_time {
  file=$1
  operation=$2
  grep '^'$operation $file | head -1 | awk '{print $8}'
}

function get_mdt_iops {
  file=$1
  op=$2
  grep '^ *File '$op $file | awk '{print $4/1000}'
}

function ior_easy {
  phase="ior_easy_$1"
  [ "$io500_run_ior_easy" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 

  params_ior_easy="-C -Q 1 -g -G 27 -k -e $io500_ior_easy_params -o $io500_workdir/ior_easy/ior_file_easy" 
  result_file="$io500_result_dir/$phase.txt"

  if [[ "$1" == "write" ]] ; then
    startphase
    myrun "$io500_ior_cmd -w $params_ior_easy" $result_file 
    endphase_check "write"
    bw1=$(get_ior_bw $result_file "write")
    dur=$(get_ior_time $result_file "write")
    print_bw 1 $bw1 $dur 
  else
    [ "$io500_run_ior_easy_read" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
    startphase
    myrun "$io500_ior_cmd -r -R $params_ior_easy" $result_file 
    endphase_check "read"
    bw3=$(get_ior_bw $result_file "read")
    dur=$(get_ior_time $result_file "read")
    print_bw 3 $bw3 $dur 
  fi
}

function mdt_easy {
  phase="mdtest_easy_$1"
  [ "$io500_run_md_easy" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 

  params_md_easy="-F -d $io500_workdir/mdt_easy -n $io500_mdtest_easy_files_per_proc $io500_mdtest_easy_params"
  result_file=$io500_result_dir/$phase.txt

  if [[ "$1" == "write" ]] ; then
    startphase
    myrun "$io500_mdtest_cmd -C $params_md_easy" $result_file 
    endphase_check "write"
    iops1=$( get_mdt_iops $result_file "creation" ) 
    print_iops 1 $iops1 $duration 
  elif [[ "$1" == "stat" ]] ; then
    [ "$io500_run_md_easy_stat" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
    startphase
    myrun "$io500_mdtest_cmd -T $params_md_easy" $result_file 
    endphase_check "stat"
    iops4=$( get_mdt_iops $result_file "stat" ) 
    print_iops 4 $iops4 $duration 
  else
    [ "$io500_run_md_easy_delete" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
    startphase
    myrun "$io500_mdtest_cmd -r $params_md_easy" $result_file 
    endphase_check "delete"
    iops6=$( get_mdt_iops $result_file "removal" ) 
    print_iops 6 $iops6 $duration 
  fi
}

function ior_hard {
  phase="ior_hard_$1"
  [ "$io500_run_ior_hard" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 

  params_ior_hard="-C -Q 1 -g -G 27 -k -e -t 47008 -b 47008 -s $io500_ior_hard_writes_per_proc -o $io500_workdir/ior_hard/IOR_file" 
  result_file="$io500_result_dir/$phase.txt"

  if [[ "$1" == "write" ]] ; then
    startphase
    myrun "$io500_ior_cmd -w $params_ior_hard" $result_file 
    endphase_check "write"
    bw2=$(get_ior_bw $result_file "write")
    dur=$(get_ior_time $result_file "write")
    print_bw 2 $bw2 $dur 
  else
    [ "$io500_run_ior_hard_read" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
    startphase
    myrun "$io500_ior_cmd -r -R $params_ior_hard" $result_file 
    endphase_check "read"
    bw4=$(get_ior_bw $result_file "read")
    dur=$(get_ior_time $result_file "read")
    print_bw 4 $bw4 $dur 
  fi
}

function mdt_hard {
  phase="mdtest_hard_$1"
  [ "$io500_run_md_hard" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 

  params_md_hard="-t -F -w $mdt_hard_fsize -e $mdt_hard_fsize -d $io500_workdir/mdt_hard -n $io500_mdtest_hard_files_per_proc"
  result_file=$io500_result_dir/$phase.txt

  if [[ "$1" == "write" ]] ; then
    startphase $phase
    myrun "$io500_mdtest_cmd -C $params_md_hard" $result_file 
    endphase_check "write"
    iops2=$( get_mdt_iops $result_file "creation" ) 
    print_iops 2 $iops2 $duration 
  elif [[ "$1" == "stat" ]] ; then
    [ "$io500_run_md_hard_stat" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
    startphase
    myrun "$io500_mdtest_cmd -T $params_md_hard" $result_file 
    endphase_check "stat"
    iops5=$( get_mdt_iops $result_file "stat" ) 
    print_iops 5 $iops5 $duration 
  else
    [ "$io500_run_md_hard_delete" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
    startphase
    myrun "$io500_mdtest_cmd -r $params_md_hard" $result_file 
    endphase_check "delete"
    iops7=$( get_mdt_iops $result_file "removal" ) 
    print_iops 7 $iops7 $duration 
  fi
}

function mdreal {
  phase="mdreal"
  [ "$io500_run_mdreal" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
  echo "Running mdreal"
  params_mdreal="-I=3 -L=$result_dir/mdreal -D=1 $params_mdreal  -- -D=${workdir}/mdreal"
}

function myfind {
  phase="find"
  [ "$io500_run_find" != "True" ] && printf "\n[Skipping] $phase\n" && return 0 
  result_file=$io500_result_dir/$phase.txt

  command="$io500_find_cmd $io500_workdir -newer $timestamp_file -size ${mdt_hard_fsize}c -name *01*" 

  startphase $phase
  if [ "$io500_find_mpi" != "True" ] ; then
    echo "[EXEC] $command"
    matches=$( $command | grep MATCHED )
  else
    myrun "$command" $result_file 
    matches=$( grep MATCHED $result_file )
  fi

  endphase_check "find"
  totalfiles=`echo $matches | cut -d \/ -f 2`
  iops3=`echo "scale = 2; ($totalfiles / $duration)/1000" | bc`
  echo "[FIND] $matches in $duration seconds"
  print_iops 3 $iops3 $duration
}

function output_score {
  echo "[Summary] Results files in $io500_result_dir"
  if [ "$io500_cleanup_workdir" != "True" ] ; then 
    echo "[Summary] Data files in $io500_workdir"
  fi
  cat $summary_file | grep BW
  cat $summary_file | grep IOPS
  bw_score=`echo $bw1 $bw2 $bw3 $bw4 | awk '{print ($1*$2*$3*$4)^(1/4)}'`
  md_score=`echo $iops1 $iops2 $iops3 $iops4 $iops5 $iops6 $iops7 | awk '{print ($1*$2*$3*$4*$5*$6*$7)^(1/7)}'`
  tot_score=`echo "scale = 2; $bw_score * $md_score" | bc`
  echo "[SCORE] Bandwidth $bw_score GB/s : IOPS $md_score kiops : TOTAL $tot_score" | tee -a $summary_file
}

function core_setup {
  echo "Running the IO500 Benchmark now"
  echo "[Creating] directories"
  pushd . > /dev/null
  cd $io500_workdir
  mkdir -p ior_easy mdt_easy mdt_hard ior_hard mdreal $io500_result_dir  
  popd > /dev/null
  timestamp_file=$io500_workdir/timestampfile  # this file is used by the find command
  summary_file=$io500_result_dir/result_summary.txt
  iops1=0;iops2=0;iops3=0;iops4=0;iops5=0;iops6=0;iops7=0
  bw1=0;bw2=0;bw3=0;bw4=0
  mdt_hard_fsize=3901
}

function print_bw  {
  printf "[RESULT] BW   phase $1 %25s %20.3f GB/s : time %6.2f seconds\n" $phase $2 $3 | tee -a $summary_file
}

function print_iops  {
  printf "[RESULT] IOPS phase $1 %25s %20.3f kiops : time %6.2f seconds\n" $phase $2 $3 | tee -a $summary_file 
}

function startphase {
  echo ""
  echo "[Starting] $phase"
  start=`date +%s.%N`
}

function endphase_check  {
  r=$?
  if [[ "$r" != "0" ]] ; then
     echo "Error: the benchmark returned $r"
     exit 1
  fi
  end=`date +%s.%N`
  duration=`echo "$end - $start" | bc`
  duration=`printf %.4f $duration`
  
  if [[ `printf "%.0f" $duration` -le 300 && "$1" == "write" ]] ; then
    echo "[Warning] This cannot be official score. The runtime of $duration seconds is below 5 minutes"
  fi
}

main
